"""
Django settings for djangopod project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
from dotenv import load_dotenv
load_dotenv()
from django.core.management.utils import get_random_secret_key # allows Docker build process to generate a random secret key since it can't read .envs

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', default=get_random_secret_key())
if not SECRET_KEY:
    raise ValueError("The DJANGO_SECRET_KEY environment variable is not set")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',')
CSRF_TRUSTED_ORIGINS = os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS', '').split(',')

# Ensure cookies are sent over HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Redirect all non-HTTPS requests to HTTPS in production
SECURE_SSL_REDIRECT = os.getenv('DJANGO_ENV') == 'production'

# Enable HSTS 
# SECURE_HSTS_SECONDS = 60  # Or more, after you're sure everything works
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# Please note that enabling HSTS carelessly can indeed cause serious, irreversible problems. Once a browser sees this policy, it will refuse to connect to the site using HTTP for the duration specified by SECURE_HSTS_SECONDS. If you misconfigure your site and it's not available over HTTPS, or if you need to move it to a server that doesn't support HTTPS, browsers that have received this policy will refuse to connect over HTTP.
# Therefore, start with a small value and then increase it when you're confident that your site is properly configured for HTTPS. Also, consider adding SECURE_HSTS_INCLUDE_SUBDOMAINS = True and SECURE_HSTS_PRELOAD = True to cover all subdomains and to be eligible for inclusion in browsers' HSTS preload lists, but be aware of the implications.

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders'
    # 'django_vite',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangopod.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'frontend', 'dist')], # Django looks for the template source file here
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangopod.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # used during production. Django stores static files here
# print("BASE_DIR is", BASE_DIR) 
print("STATIC_ROOT is", STATIC_ROOT) 
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'frontend','public'),
    os.path.join(BASE_DIR, 'frontend','assets'),
    os.path.join(BASE_DIR, 'frontend','dist'),
    os.path.join(BASE_DIR, 'frontend','html'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DJANGO_VITE = {
#   "default": {
#     "dev_mode": True
#   }
# }

# TODO: Remember to replace True with the actual origins you want to allow in a production environment.
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173", # for local development
    "http://localhost:3000", # for local development
    "http://192.168.0.246:3000",  # for access within local network
    "http://0.0.0.0:8000",
    "http://127.0.0.1:8000", 
    "https://spiffy-fox-4881fd.netlify.app",
    "http://192.168.0.246",
     "http://example.com",  # replace with your domain name
    "http://203.0.113.0",  # replace with your public IP address
]